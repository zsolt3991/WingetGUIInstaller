
name:  Build Application

on:
    workflow_dispatch:
  # push:
  #   tags:
  #     - '*'

jobs:

  build:
    runs-on: windows-latest

    env:
      App_Packages_Archive: Sideload
      App_Packages_Directory: Sideload
      SigningCertificate: zsolt9331_sideload.pfx
      Solution_Path: WingetGUIInstaller.sln
      App_Project_Directory: WingetGUIInstaller
      App_Project_Path: WingetGUIInstaller\WingetGUIInstaller.csproj
      App_Project_Name: WingetGUIInstaller.csproj
      DistributionUrl: https://github.com/zsolt9331/WingetGUIInstaller/releases/
      MsixPackageId: zsolt9331.WingetGUIInstaller.Sideload
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands
      TargetPlatform: x64
      MsixPackageDisplayName: WingetGUIInstaller (Sideload)
      Configuration: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Install the .NET 6
    - name: Install .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.*'

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.1

    # Decode the Base64 encoded Pfx
    - name: Decode and Import the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:App_Project_Directory -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

        $pwd = ConvertTo-SecureString -String "${{ secrets.Pfx_Key}}" -AsPlainText -Force
        Import-PfxCertificate -Password $pwd -FilePath "$certificatePath" -CertStoreLocation Cert:\CurrentUser\My

    # Restore the application
    - name:  Restore the application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: ${{ env.Configuration }}
        RuntimeIdentifier: win-${{ env.targetplatform }}

    # Build the project for Dev and Sideload
    - name: Build the Windows Application Package
      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:BuildMode /p:AppxBundle=$env:AppxBundle /p:PackageCertificateKeyFile=$env:SigningCertificate /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        AppxBundle: Always
        AppInstallerUri: ${{ env.DistributionUrl }}
        BuildMode: SideloadOnly
        Configuration: ${{ env.Configuration }}
        GenerateAppInstallerFile: True
        TargetPlatform: ${{ env.targetplatform }}

    # Remove the .pfx
    - name: Remove the .pfx
      run: Remove-Item -path $env:App_Project_Directory\$env:SigningCertificate

    # Create the release:  
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref}}.${{ env.targetplatform }}
        release_name:  ${{ github.ref }}.${{ env.targetplatform }}
        draft: false
        prerelease: false

    # Upload release asset:  
    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ env.App_Project_Directory }}\${{ env.App_Packages_Directory }}\*.msixbundle
        asset_name: ${{ env.App_Packages_Archive }}
        asset_content_type: application/octet-stream