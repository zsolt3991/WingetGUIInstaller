
name: Build Application

on:
  push:
    tags:
      - '*'

jobs:

  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86]

    runs-on: windows-latest

    env:
      App_Packages_Archive: Sideload
      SigningCertificate: zsolt9331_sideload.pfx
      Solution_Path: WingetGUIInstaller.sln
      App_Project_Directory: WingetGUIInstaller
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    - name: Get tag
      id: tag
      uses: dawidd6/action-get-tag@v1 

    # Install the .NET 6
    - name: Install .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.*'

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.1

    # Decode the Base64 encoded Pfx
    - name: Decode and Import the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_CERTIFICATE }}")
        $certificatePath = $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Update manifest version
      run: |
        [xml]$manifest = get-content ".\$env:App_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{steps.tag.outputs.tag}}"
        $manifest.save(".\$env:App_Project_Directory\Package.appxmanifest")    

    # Restore the application
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the project 
    - name: Build the Windows Application Package
      run: msbuild $env:Solution_Path /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile$env:PackageCertificate /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
        Appx_Package_Dir: Packages\
        PackageCertificate: ${{ env.SigningCertificate }} 
        Appx_Bundle: Always 
        Appx_Package_Build_Mode: StoreUpload

   # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:SigningCertificate

    # Create the release:  
    - name: Create Release
      uses: ncipollo/release-action@v1.10.0
      with:
        tag: ${{ steps.tag.outputs.tag }}
        name:  ${{ steps.tag.outputs.tag }}.${{ env.targetplatform }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    # Upload release asset:  
    - name: Update release asset
      id: upload-release-asset
      uses: AButler/upload-release-assets@v2.0
      with: 
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-tag: ${{ steps.tag.outputs.tag }}
        files: "Packages/*.msix;Packages/*.msixbundle"