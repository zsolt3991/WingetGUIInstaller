
name: Build Application

on:
  push:
    tags:
      - '*'

jobs:

  build:
    runs-on: windows-latest

    env:
      App_Packages_Archive: Sideload
      CertificateThumbprint: f8a9fb77d831dd776f874e8edf5bcc84c77ce224
      Solution_Path: WingetGUIInstaller.sln
      App_Project_Directory: WingetGUIInstaller
      App_Project_Path: WingetGUIInstaller\WingetGUIInstaller.csproj
      App_Project_Name: WingetGUIInstaller.csproj
      DistributionUrl: https://github.com/zsolt9331/WingetGUIInstaller/releases/
      MsixPackageId: zsolt9331.WingetGUIInstaller.Sideload
      Actions_Allow_Unsecure_Commands: true # Allows AddPAth and SetEnv commands
      TargetPlatform: x64
      MsixPackageDisplayName: WingetGUIInstaller (Sideload)
      Configuration: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Install the .NET 6
    - name: Install .NET 6
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.*'

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.1

    - name: Get tag
      id: tag
      uses: dawidd6/action-get-tag@v1 

    - name: Extract version from tag
      uses: Amadevus/pwsh-script@v1
      id: getVersion
      with:
        script: '("${{steps.tag.outputs.tag}}").Split("v")[1]'

    - name: Update manifest version
      run: |
        [xml]$manifest = get-content ".\$env:App_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{steps.getVersion.outputs.result}}"
        $manifest.save(".\$env:App_Project_Directory\Package.appxmanifest")

    # Decode the Base64 encoded Pfx
    - name: Decode and Import the Pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath $env:App_Project_Directory -AdditionalChildPath $env:SigningCertificate
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

        $pwd = ConvertTo-SecureString -String "${{ secrets.Pfx_Key}}" -AsPlainText -Force
        Import-PfxCertificate -Password $pwd -FilePath "$certificatePath" -CertStoreLocation Cert:\CurrentUser\My

    # Restore the application
    - name:  Restore the application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: ${{ env.Configuration }}
        RuntimeIdentifier: win-${{ env.targetplatform }}

    # Build the project for Dev and Sideload
    - name: Build the Windows Application Package
      run: msbuild $env:Solution_Path /p:Platform=$env:TargetPlatform /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=CI /p:AppxBundle=Always /p:PackageCertificateThumbprint=$env:SigningCertificate /p:PublishReadyToRun=false /p:GenerateAppxPackageOnBuild=true
      env:
        AppxBundle: Always
        AppInstallerUri: ${{ env.DistributionUrl }}
        BuildMode: SideloadOnly
        Configuration: ${{ env.Configuration }}
        GenerateAppInstallerFile: True
        TargetPlatform: ${{ env.targetplatform }}

    # Remove the .pfx
    - name: Remove the .pfx
      run: Remove-Item -path $env:App_Project_Directory\$env:SigningCertificate

    # Create the release:  
    - name: Create Release
      uses: ncipollo/release-action@v1.10.0
      with:
        tag: ${{ github.ref}}
        name:  ${{ github.ref }}.${{ env.targetplatform }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Archive Release
      uses: thedoctor0/zip-release@master
      with:
        type: 'zip'
        path: "*/bin/*/Release/*/AppPackages/*/"
        filename: 'Sideload.zip'

    # Upload release asset:  
    - name: Update release asset
      id: upload-release-asset
      uses: AButler/upload-release-assets@v2.0
      with: 
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-tag: ${{ github.ref}}
        files: "*.zip*"